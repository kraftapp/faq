{"version":3,"sources":["faq/Question.tsx","faq/Topic.tsx","faq/topics/index.tsx","faq/topics/payment_unblock.tsx","faq/topics/example2.topic.tsx","faq/FAQ.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Question","props","useState","opened","setOpened","className","onClick","title","Collapse","in","content","Topic","Card","id","Body","Title","ListGroup","variant","questions","map","q","Item","TopicsList","Fragment","keywords","src","FAQ","topics","searchTerm","setSearchTerm","filteredTopics","setFilteredTopics","Container","Row","Col","md","Form","Group","controlId","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","term","target","value","filtered","filter","topic","JSON","stringify","toLowerCase","indexOf","Append","Button","CardDeck","Img","href","as","Nav","Link","key","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wZAYaA,G,MAAW,SAACC,GAAsB,IAAD,EAChBC,mBAASD,EAAME,SAAU,GADT,mBACrCA,EADqC,KAC7BC,EAD6B,KAG5C,OACE,yBACEC,UAAS,mBAAcF,EAAS,SAAW,IAC3CG,QAAS,kBAAMF,GAAWD,KAE1B,yBAAKE,UAAU,kBAAkBJ,EAAMM,OACvC,kBAACC,EAAA,EAAD,CAAUC,GAAIN,GACZ,yBAAKE,UAAU,iBAAiBJ,EAAMS,aCXjCC,G,MAAQ,SAACV,GACpB,OACE,kBAACW,EAAA,EAAD,CAAMP,UAAU,QAAQQ,GAAIZ,EAAMY,IAChC,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,KAAad,EAAMM,OACnB,kBAACS,EAAA,EAAD,CAAWC,QAAQ,SAChBhB,EAAMiB,UAAUC,KAAI,SAAAC,GAAC,OACpB,kBAACJ,EAAA,EAAUK,KAAX,CAAgBR,GAAIO,EAAEP,GAAIR,UAAU,OAClC,kBAAC,EAAae,YChBfE,EAAa,CCCiB,CACzCT,GAAI,mBACJN,MAAO,qBACPW,UAAW,CACT,CACEL,GAAI,0BACJN,MAAO,wDACPG,QACE,kBAAC,IAAMa,SAAP,KACE,mKAEmE,KAEnE,0RASN,CACEV,GAAI,eACJN,MAAO,gCACPG,QAAS,kBAAC,IAAMa,SAAP,OAEX,CACEV,GAAI,eACJW,SAAU,0BACVjB,MAAO,4BACPG,QACE,kBAAC,IAAMa,SAAP,KACE,yBACEE,IAAI,sCACJpB,UAAU,cAEZ,yQCrC0B,CAClCQ,GAAI,gBACJN,MAAO,WACPW,UAAW,CACT,CACEL,GAAI,KACJN,MAAO,SACPG,QAAS,2BCwIAgB,MA/Hf,WACE,IAAMC,EAAmBL,EADZ,EAGuBpB,mBAAS,IAHhC,mBAGN0B,EAHM,KAGMC,EAHN,OAI+B3B,mBAASyB,GAJxC,mBAING,EAJM,KAIUC,EAJV,KAqBb,OACE,kBAAC,IAAMR,SAAP,KACE,yBAAKlB,UAAU,QACb,kBAAC2B,EAAA,EAAD,CAAW3B,UAAU,SACnB,kBAAC4B,EAAA,EAAD,CAAK5B,UAAU,SACb,kBAAC6B,EAAA,EAAD,CAAKC,GAAI,GAAI9B,UAAU,6CACrB,wBAAIA,UAAU,SAAd,oBAEA,kBAAC+B,EAAA,EAAKC,MAAN,CAAYC,UAAU,cACpB,kBAACC,EAAA,EAAD,CAAYlC,UAAU,oBACpB,kBAACmC,EAAA,EAAD,CACEC,YAAY,4CACZC,aAAW,SACXC,mBAAiB,eACjBC,SA7BS,SAACC,GAC1B,IAAMC,EAAOD,EAAEE,OAAOC,MACtBnB,EAAciB,GAEd,IAAMG,EACJtB,EAAOuB,QACL,SAAAC,GAAK,OACHC,KAAKC,UAAUF,GACZG,cACAC,QAAQT,IAAS,MACnB,GAEPf,EAAkBkB,IAkBFD,MAAOpB,IAET,kBAACW,EAAA,EAAWiB,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQxC,QAAQ,WAAhB,iBASd,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAI7B,UAAU,eAAd,uBAGJ,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACwB,EAAA,EAAD,CAAUrD,UAAU,gBAClB,kBAACO,EAAA,EAAD,CAAMP,UAAU,mBACd,kBAACO,EAAA,EAAK+C,IAAN,CAAUlC,IAAI,gBACd,kBAACb,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKE,KAAN,KACE,kBAACE,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUK,KAAX,CAAgBuC,KAAK,2BAA2BC,GAAG,KAAnD,kBAGA,kBAAC7C,EAAA,EAAUK,KAAX,CAAgBuC,KAAK,SAASC,GAAG,KAAjC,aAMN,kBAACjD,EAAA,EAAD,CAAMP,UAAU,mBACd,kBAACO,EAAA,EAAK+C,IAAN,CAAUlC,IAAI,cACd,kBAACb,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKE,KAAN,KACE,kBAACE,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUK,KAAX,CAAgBuC,KAAK,SAASC,GAAG,KAAjC,UAGA,kBAAC7C,EAAA,EAAUK,KAAX,CAAgBuC,KAAK,SAASC,GAAG,KAAjC,gBAUZ,kBAAC5B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAG9B,UAAU,cACpB,kBAACO,EAAA,EAAD,KACE,kBAACkD,EAAA,EAAD,CAAKzD,UAAU,8BACZsB,EAAOR,KAAI,SAAAgC,GAAK,OACf,kBAACW,EAAA,EAAIC,KAAL,CAAUH,KAAM,IAAMT,EAAMtC,GAAImD,IAAKb,EAAMtC,IACxCsC,EAAM5C,aAMjB,kBAAC2B,EAAA,EAAD,CACEC,GAAI,EACJ9B,UAAU,oDAETyB,EAAemC,OAAS,GACvBnC,EAAeX,KAAI,SAAAgC,GAAK,OACtB,kBAAC,EAAD,CACEtC,GAAIsC,EAAMtC,GACVmD,IAAKb,EAAMtC,GACXN,MAAO4C,EAAM5C,MACbW,UAAWiC,EAAMjC,eAGG,GAAzBY,EAAemC,QACd,0BAAM5D,UAAU,eAAhB,kFC1HC6D,MARf,WACE,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,QCIc8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24657fba.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, Accordion, Row, ListGroup, Collapse } from \"react-bootstrap\";\nimport \"./Question.scss\";\n\nexport interface IQuestion {\n  id: string;\n  title: string;\n  content: any;\n  keywords?: string;\n  opened?: boolean;\n}\n\nexport const Question = (props: IQuestion) => {\n  const [opened, setOpened] = useState(props.opened || false);\n\n  return (\n    <div\n      className={`question ${opened ? \"opened\" : \"\"}`}\n      onClick={() => setOpened(!opened)}\n    >\n      <div className=\"question-title\">{props.title}</div>\n      <Collapse in={opened}>\n        <div className=\"question-body\">{props.content}</div>\n      </Collapse>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card, Accordion, Row, Col, ListGroup } from \"react-bootstrap\";\nimport { Question, IQuestion } from \"./Question\";\nimport \"./Topic.scss\";\n\nexport interface ITopic {\n  id: string;\n  title: string;\n  questions: IQuestion[];\n}\n\nexport const Topic = (props: ITopic) => {\n  return (\n    <Card className=\"topic\" id={props.id}>\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <ListGroup variant=\"flush\">\n          {props.questions.map(q => (\n            <ListGroup.Item id={q.id} className=\"p-0\">\n              <Question {...q} />\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n","import { PaymentUnblockTopic } from \"./payment_unblock\";\nimport { exampleData2 } from \"./example2.topic\";\n\nexport const TopicsList = [PaymentUnblockTopic, exampleData2];\n","import React from \"react\";\nimport { IQuestion } from \"../Question\";\nimport { ITopic } from \"../Topic\";\n\nexport const PaymentUnblockTopic: ITopic = {\n  id: \"purchase_unblock\",\n  title: \"Purchase & Unblock\",\n  questions: [\n    {\n      id: \"already_paid_persistent\",\n      title: \"I've already paid but it keeps asking me to pay again\",\n      content: (\n        <React.Fragment>\n          <p>\n            When the code pops up after installing a clock face, enter the new 5\n            digit code here. Your clock face will instantly unlock for free.{\" \"}\n          </p>\n          <p>\n            This is a current limitation of the Fitbit platform when swapping\n            clock faces, however there will be an update out soon which will\n            automatically unlock clock faces. You can also bookmark this page to\n            install and unlock clock faces quickly in future.\n          </p>\n        </React.Fragment>\n      )\n    },\n    {\n      id: \"how_purchase\",\n      title: \"How to purchase a clock face?\",\n      content: <React.Fragment></React.Fragment>\n    },\n    {\n      id: \"how_purchase\",\n      keywords: \"purchase bundle package\",\n      title: \"How to purchase a bundle?\",\n      content: (\n        <React.Fragment>\n          <img\n            src=\"https://reno.watch/img/purchase.png\"\n            className=\"img-fluid\"\n          />\n          <p>\n            Thank you for your support! After installing a clock face, a code\n            will pop up on your watch. Head to the website shown on your watch\n            (or tap here) and type the code in. Once purchased, the clock face\n            will instantly unlock for you.\n          </p>\n        </React.Fragment>\n      )\n    }\n  ]\n};\n","import React from \"react\";\nimport { IQuestion } from \"../Question\";\nimport { ITopic } from \"../Topic\";\n\nexport const exampleData2: ITopic = {\n  id: \"settings_test\",\n  title: \"Settings\",\n  questions: [\n    {\n      id: \"q3\",\n      title: \"Set q3\",\n      content: \" oi sou soh um texto\"\n    }\n  ]\n};\n","import React, { useState } from \"react\";\nimport \"./FAQ.scss\";\nimport {\n  Jumbotron,\n  Form,\n  InputGroup,\n  FormControl,\n  Button,\n  Container,\n  Row,\n  Col,\n  Accordion,\n  Card,\n  CardDeck,\n  ListGroup,\n  Nav\n} from \"react-bootstrap\";\nimport { Topic, ITopic } from \"./Topic\";\nimport { TopicsList } from \"./topics\";\n\nfunction FAQ() {\n  const topics: ITopic[] = TopicsList;\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredTopics, setFilteredTopics] = useState(topics);\n\n  const inputSearchChanged = (e: any) => {\n    const term = e.target.value;\n    setSearchTerm(term);\n\n    const filtered =\n      topics.filter(\n        topic =>\n          JSON.stringify(topic)\n            .toLowerCase()\n            .indexOf(term) >= 0\n      ) || [];\n\n    setFilteredTopics(filtered);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"hero\">\n        <Container className=\"h-100\">\n          <Row className=\"h-100\">\n            <Col md={12} className=\"d-flex flex-column justify-content-center\">\n              <h1 className=\"mb-3 \">How can we help?</h1>\n\n              <Form.Group controlId=\"formSearch\">\n                <InputGroup className=\"mb-3 searchInput\">\n                  <FormControl\n                    placeholder=\"Ask us a question, or enter some key word\"\n                    aria-label=\"Search\"\n                    aria-describedby=\"basic-search\"\n                    onChange={inputSearchChanged}\n                    value={searchTerm}\n                  />\n                  <InputGroup.Append>\n                    <Button variant=\"primary\">Search</Button>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Form.Group>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"topic-title\">Popular questions</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <CardDeck className=\"popular mb-4\">\n              <Card className=\"card-image-left\">\n                <Card.Img src=\"payment.svg\" />\n                <Card.Title>Payments</Card.Title>\n                <Card.Body>\n                  <ListGroup variant=\"flush\">\n                    <ListGroup.Item href=\"#already_paid_persistent\" as=\"a\">\n                      How to Unblock\n                    </ListGroup.Item>\n                    <ListGroup.Item href=\"#test1\" as=\"a\">\n                      Link 2\n                    </ListGroup.Item>\n                  </ListGroup>\n                </Card.Body>\n              </Card>\n              <Card className=\"card-image-left\">\n                <Card.Img src=\"gears.svg\" />\n                <Card.Title>Configuration</Card.Title>\n                <Card.Body>\n                  <ListGroup variant=\"flush\">\n                    <ListGroup.Item href=\"#test1\" as=\"a\">\n                      Link 1\n                    </ListGroup.Item>\n                    <ListGroup.Item href=\"#test1\" as=\"a\">\n                      Link 2\n                    </ListGroup.Item>\n                  </ListGroup>\n                </Card.Body>\n              </Card>\n            </CardDeck>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={4} className=\"topics-nav\">\n            <Card>\n              <Nav className=\"flex-md-column flex-xs-row\">\n                {topics.map(topic => (\n                  <Nav.Link href={\"#\" + topic.id} key={topic.id}>\n                    {topic.title}\n                  </Nav.Link>\n                ))}\n              </Nav>\n            </Card>\n          </Col>\n          <Col\n            md={8}\n            className=\"topics d-flex flex-column justify-content-center\"\n          >\n            {filteredTopics.length > 0 &&\n              filteredTopics.map(topic => (\n                <Topic\n                  id={topic.id}\n                  key={topic.id}\n                  title={topic.title}\n                  questions={topic.questions}\n                />\n              ))}\n            {filteredTopics.length == 0 && (\n              <span className=\"text-center\">\n                Oh snap! We didn't find an answer to that, wanna try contact us\n                directly?\n              </span>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default FAQ;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport FAQ from \"./faq/FAQ\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FAQ />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}